# Project template
- layout: top-middle
  name: Double-Diffusive Convection
  link: https://github.com/jamiejquinn/2D-Convection
  #github: jamiejquinn/2D-Convection
  quote: >
    A 2D pseudo-spectral code designed to simulate double-diffusive phenomena
  description: | # this will include new lines to allow paragraphs
    Following the ideas of Glatzmaier in *Introduction to Modeling Convection in Planets and Stars* this is a code written in C++ designed as an educational project to explore different numerical methods and techniques. The long-term goal is to efficiently simulate thermohaline staircase dynamics. The numerical method is second order and explicit in time, with adaptive time-stepping. Space is discretised vertically using finite difference and horizontally using a spectral method. Nonlinear terms are calculated via a spectral-transform method employing FFTs. The code has been parallelised using both OpenMP and CUDA.

- layout: top-middle
  name: SDF-Tool
  link: https://github.com/jamiejquinn/sdf-tool
  #github: jamiejquinn/2D-Convection
  quote: >
    An SDF file format manipulation tool
  description: | # this will include new lines to allow paragraphs
    When visualising data stored in SDF files outputted from the numerical magnetohydrodynamics code Lare3d, it's very useful to be able to remove parts of the computational domain that have no use to the visualisation. SDF-Tool allows users to do just that, allowing the manipulation of SDF files to reduce file size and improve efficiency of visualisation pipelines. Written in Fortran.

- layout: top-middle
  name: GFP Simulator 9000
  link: https://github.com/JamieJQuinn/gfp-simulator-9000
  quote: >
    Simulating GFP-CRIB molecules within cancer cells
  description: | # this will include new lines to allow paragraphs
    This is a finite-element code designed to simulate the complex inverse problem of the interaction between GFP-CRIB in the cytoplasm and Rac in the membrane. Both 2D and 3D cells are simulated. The code is written in Python and leverages the procedural meshing and finite-element matrix construction of the library [PyMesh](https://pymesh.readthedocs.io/en/latest/).
